// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// User model for all platform users (candidates and company representatives)
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String   // Hashed password
  firstName     String
  lastName      String
  avatar        String?
  phone         String?
  role          UserRole @default(CANDIDATE)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  companyMemberships CompanyMember[]
  jobApplications    JobApplication[]
  savedJobs          SavedJob[]
  conversations      ConversationParticipant[]
  messages           Message[]
  jobViews           JobView[]
  companyViews      CompanyView[]

  @@map("users")
}

enum UserRole {
  CANDIDATE
  COMPANY_ADMIN
  COMPANY_MEMBER
  SUPER_ADMIN
}

// Company model
model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  website     String?
  industry    String?
  size        CompanySize?
  logo        String?  // URL to logo image
  coverImage  String?  // URL to cover image
  foundedYear Int?
  address     String?
  city        String?
  country     String   @default("France")
  postalCode  String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members      CompanyMember[]
  jobPostings  JobPosting[]
  testimonials Testimonial[]
  benefits     CompanyBenefit[]
  commitments  CompanyCommitment[]
  subscriptions CompanySubscription[]
  views        CompanyView[]


  @@map("companies")
}

enum CompanySize {
  SIZE_1_10
  SIZE_11_50
  SIZE_51_200
  SIZE_201_500
  SIZE_501_1000
  SIZE_1000_PLUS
}

// Company members (users who belong to a company)
model CompanyMember {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      CompanyMemberRole @default(MEMBER)
  jobTitle  String?
  department String?
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("company_members")
}

enum CompanyMemberRole {
  ADMIN
  MEMBER
  RECRUITER
}

// Job postings
model JobPosting {
  id               String       @id @default(cuid())
  title            String
  slug             String
  description      String
  requirements     String?
  responsibilities String?
  benefits         String?
  location         String
  remotePolicy     RemotePolicy @default(ONSITE)
  employmentType   EmploymentType
  salaryMin        Int?
  salaryMax        Int?
  currency         String       @default("EUR")
  experienceLevel  ExperienceLevel
  isActive         Boolean      @default(true)
  isFeatured       Boolean      @default(false)
  applicationUrl   String?      // External application URL
  views            Int          @default(0)
  applicationCount Int          @default(0)
  publishedAt      DateTime?
  expiresAt        DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Foreign keys
  companyId String

  // Relationships
  company       Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications  JobApplication[]
  savedByUsers  SavedJob[]
  jobCategories JobPostingCategory[]
  jobViews      JobView[]

  @@map("job_postings")
}

enum RemotePolicy {
  ONSITE
  HYBRID
  REMOTE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
}

enum ExperienceLevel {
  INTERNSHIP
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  EXECUTIVE
}

// Job categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  jobPostings JobPostingCategory[]

  @@map("categories")
}

// Many-to-many relationship between JobPosting and Category
model JobPostingCategory {
  id           String   @id @default(cuid())
  jobPostingId String
  categoryId   String

  // Relationships
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)


  @@unique([jobPostingId, categoryId])
  @@map("job_posting_categories")
}

// Job applications
model JobApplication {
  id           String         @id @default(cuid())
  status       ApplicationStatus @default(PENDING)
  coverLetter  String?
  resume       String         // URL to resume file
  message      String?
  appliedAt    DateTime       @default(now())
  reviewedAt   DateTime?
  contactedAt  DateTime?
  interviewedAt DateTime?
  hiredAt      DateTime?
  rejectedAt   DateTime?

  // Foreign keys
  jobPostingId String
  userId       String

  // Relationships
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobPostingId])
  @@map("job_applications")
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  CONTACTED
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
  WITHDRAWN
}

// Saved jobs (bookmarks)
model SavedJob {
  id           String   @id @default(cuid())
  userId       String
  jobPostingId String
  savedAt      DateTime @default(now())

  // Relationships
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)

  @@unique([userId, jobPostingId])
  @@map("saved_jobs")
}

// Company testimonials/employee stories
model Testimonial {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorName  String
  authorRole  String
  authorImage String?  // URL to author image
  videoUrl    String?  // URL to video testimonial
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key
  companyId String

  // Relationships
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}

// Company benefits
model CompanyBenefit {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?  // URL to benefit icon
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key
  companyId String

  // Relationships
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefits")
}

// Company commitments (DEI, sustainability, etc.)
model CompanyCommitment {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?  // URL to commitment icon
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key
  companyId String

  // Relationships
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_commitments")
}

// Messaging system
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  messageType    MessageType @default(TEXT)
  attachmentUrl  String?
  isEdited       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Foreign keys
  senderId        String
  conversationId  String

  // Relationships
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

// Subscription plans for companies
model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  priceMonthly Int
  currency     String   @default("EUR")
  features     Json     // Array of features as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  subscriptions CompanySubscription[]

  @@map("subscription_plans")
}

// Company subscriptions
model CompanySubscription {
  id                 String         @id @default(cuid())
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean        @default(false)
  canceledAt         DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Foreign keys
  companyId            String
  subscriptionPlanId   String

  // Relationships
  company           Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscriptionPlan  SubscriptionPlan  @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)

  @@map("company_subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

// Analytics and tracking
model JobView {
  id           String   @id @default(cuid())
  jobPostingId String
  userId       String?  // Null if anonymous
  viewedAt     DateTime @default(now())
  ipAddress    String?
  userAgent    String?

  // Relationships
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_views")
}

model CompanyView {
  id        String   @id @default(cuid())
  companyId String
  userId    String?  // Null if anonymous
  viewedAt  DateTime @default(now())
  ipAddress String?
  userAgent String?

  // Relationships
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_views")
}